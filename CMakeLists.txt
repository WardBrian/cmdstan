cmake_minimum_required(VERSION 3.20.2)
project(
    cmdstan
    VERSION 2.33.0
    LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS NO)

#################### dependencies ####################
# consider also local: https://cmake.org/cmake/help/latest/guide/using-dependencies/index.html#fetchcontent-and-find-package-integration
include(FetchContent)

FetchContent_Declare(rapidjson
    GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
    GIT_TAG        master)
FetchContent_GetProperties(rapidjson)
if(NOT rapidjson_POPULATED)
  FetchContent_Populate(rapidjson)
  set(rapidjson_INCLUDE_DIR ${rapidjson_SOURCE_DIR}/include)
endif()

FetchContent_Declare(
  stan
  GIT_REPOSITORY https://github.com/stan-dev/stan
  GIT_TAG        develop # replace with the version you want to use
  GIT_SHALLOW    TRUE
)

FetchContent_GetProperties(stan)
if(NOT stan_POPULATED)
  FetchContent_Populate(stan)
  set(stan_INCLUDE_DIR ${stan_SOURCE_DIR}/src)
endif()

# result of installing https://github.com/WardBrian/math/tree/experiment/cmake
list(APPEND CMAKE_PREFIX_PATH "../math-install")
find_package(StanMath 4.6.2 REQUIRED)
#################### end dependencies ####################

include(stanc.cmake.inc)

option(STAN_THREADS "Enable threading support" ON)
if (STAN_THREADS)
    add_compile_definitions(STAN_THREADS)
endif()

add_subdirectory(src)

# the following macro is used to generate the executables
# for a given stan model
macro(stan_model arg1)
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${arg1}.cpp
    DEPENDS ${arg1}.stan ${PROJECT_BINARY_DIR}/bin/stanc${CMAKE_EXECUTABLE_SUFFIX}
    COMMAND ${PROJECT_BINARY_DIR}/bin/stanc${CMAKE_EXECUTABLE_SUFFIX} ${arg1}.stan --o=${CMAKE_CURRENT_BINARY_DIR}/${arg1}.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

  add_executable(
    ${arg1}
    ${CMAKE_CURRENT_BINARY_DIR}/${arg1}.cpp
    $<TARGET_OBJECTS:cmdstan_main>
  )

  target_include_directories(${arg1} PRIVATE
    ${stan_INCLUDE_DIR})
  target_link_libraries(${arg1} PRIVATE
    StanMath::stanmath)
  target_precompile_headers(${arg1} REUSE_FROM cmdstan_main)
endmacro()

# this is generated by build.py and contains one call to the above macro
if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists-model.txt)
  include(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists-model.txt)
endif()

add_subdirectory(examples)
# TODO tests
